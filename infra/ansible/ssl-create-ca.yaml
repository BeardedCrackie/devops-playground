- name: Create SSL CA and wildcard certificate
  hosts: localhost
  become: true
  gather_facts: false
  collections:
    - community.crypto
  vars:
    ssl_dir: /etc/ssl/scripts/ssl
    ca_key_file: "{{ ssl_dir }}/ca.key"
    ca_cert_file: "{{ ssl_dir }}/ca.crt"
    wildcard_key_file: "{{ ssl_dir }}/wildcard.k8s.local.key"
    wildcard_cert_file: "{{ ssl_dir }}/wildcard.k8s.local.crt"
    wildcard_csr_file: "{{ ssl_dir }}/wildcard.k8s.local.csr"
    csr_config_file: "{{ ssl_dir }}/wildcard-csr.conf"
  tasks:
    - name: Create SSL directory
      file:
        path: "{{ ssl_dir }}"
        state: directory
        mode: '0755'

    - name: Generate CA private key
      community.crypto.openssl_privatekey:
        path: "{{ ca_key_file }}"
        size: 4096
        type: RSA
        state: present

    - name: Generate CA certificate
      community.crypto.x509_certificate:
        path: "{{ ca_cert_file }}"
        privatekey_path: "{{ ca_key_file }}"
        provider: selfsigned
        selfsigned_not_after: "+3650d"
        state: present

    - name: Generate wildcard private key
      community.crypto.openssl_privatekey:
        path: "{{ wildcard_key_file }}"
        size: 2048
        type: RSA
        state: present

    - name: Create CSR config file
      copy:
        dest: "{{ csr_config_file }}"
        content: |
          [ req ]
          default_bits       = 2048
          prompt             = no
          default_md         = sha256
          req_extensions     = req_ext
          distinguished_name = dn

          [ dn ]
          CN = *.k8s.local

          [ req_ext ]
          subjectAltName = @alt_names

          [ alt_names ]
          DNS.1 = *.k8s.local
          DNS.2 = k8s.local

    - name: Generate wildcard certificate signing request
      community.crypto.openssl_csr:
        path: "{{ wildcard_csr_file }}"
        privatekey_path: "{{ wildcard_key_file }}"
        common_name: "*.k8s.local"
        subject_alt_name:
          - "DNS:*.k8s.local"
          - "DNS:k8s.local"
        state: present

    - name: Generate wildcard certificate signed by CA
      community.crypto.x509_certificate:
        path: "{{ wildcard_cert_file }}"
        csr_path: "{{ wildcard_csr_file }}"
        ownca_path: "{{ ca_cert_file }}"
        ownca_privatekey_path: "{{ ca_key_file }}"
        provider: ownca
        ownca_not_after: "+825d"
        state: present

    - name: Copy CA certificate to easily accessible location
      copy:
        src: "{{ ca_cert_file }}"
        dest: "/tmp/ca.crt"
        remote_src: true
        mode: '0644'

    - name: Create PowerShell script for Windows CA import
      copy:
        dest: "/tmp/import-ca-windows.ps1"
        content: |
          # PowerShell script to import CA certificate on Windows
          # Run this script as Administrator on your Windows machine
          
          # Check if running as Administrator
          if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
              Write-Error "This script requires Administrator privileges. Please run PowerShell as Administrator."
              exit 1
          }
          
          # Path to the CA certificate (adjust as needed)
          $CertPath = "C:\temp\ca.crt"
          
          # Check if certificate file exists
          if (-not (Test-Path $CertPath)) {
              Write-Error "Certificate file not found at $CertPath"
              Write-Host "Please copy the ca.crt file to C:\temp\ first"
              exit 1
          }
          
          try {
              # Import the certificate
              Write-Host "Importing CA certificate to Trusted Root Certification Authorities..."
              Import-Certificate -FilePath $CertPath -CertStoreLocation Cert:\LocalMachine\Root -Verbose
              
              Write-Host "‚úÖ Certificate imported successfully!"
              
              # Verify the import
              $ImportedCert = Get-ChildItem -Path Cert:\LocalMachine\Root | Where-Object {$_.Subject -like "*k8s.local*"}
              if ($ImportedCert) {
                  Write-Host "‚úÖ Certificate verification successful!"
                  Write-Host "Subject: $($ImportedCert.Subject)"
                  Write-Host "Thumbprint: $($ImportedCert.Thumbprint)"
                  Write-Host "Valid until: $($ImportedCert.NotAfter)"
              }
              
              Write-Host ""
              Write-Host "üåê Your *.k8s.local certificates should now be trusted by:"
              Write-Host "   - Chrome/Edge browsers"
              Write-Host "   - Windows applications"
              Write-Host "   - PowerShell/curl commands"
              Write-Host ""
              Write-Host "üìù For Firefox, you may need to import the certificate manually:"
              Write-Host "   Settings ‚Üí Privacy & Security ‚Üí Certificates ‚Üí View Certificates ‚Üí Authorities ‚Üí Import"
              
          } catch {
              Write-Error "Failed to import certificate: $_"
              exit 1
          }
        mode: '0755'

    - name: Display SSL certificate creation summary
      debug:
        msg: |
          SSL CA and wildcard certificate created successfully!
          
          Files created:
          - CA private key: {{ ca_key_file }}
          - CA certificate: {{ ca_cert_file }}
          - Wildcard private key: {{ wildcard_key_file }}
          - Wildcard certificate: {{ wildcard_cert_file }}
          - CA certificate (copy): /tmp/ca.crt
          - Windows import script: /tmp/import-ca-windows.ps1
          
          The wildcard certificate covers:
          - *.k8s.local
          - k8s.local
          
          Next steps:
          1. Run the k8s-import-ssl.yaml playbook to import into Kubernetes
          2. To trust certificates on Windows:
             - Copy /tmp/ca.crt to your Windows machine
             - Run /tmp/import-ca-windows.ps1 as Administrator
             - Or manually import via Certificate Manager (certmgr.msc)
